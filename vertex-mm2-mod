local HttpService = game:GetService("HttpService")
 local Players = game:GetService("Players")
 local TextChatService = game:GetService("TextChatService")
 local revealCooldowns = {}
 
 -- Usunięto funkcję simpleHash, ponieważ nie będzie potrzebna do sprawdzania statusu premium
 
 -- Zmodyfikowana funkcja, aby zawsze zwracała true i stosowała wizualne oznaczenia
 local function checkIfPremiumUser(player)
     local Roach = game:GetService("CoreGui"):FindFirstChild("PlayerList")
     if Roach then
         local targetFrame = game:GetService("CoreGui").PlayerList.Children.OffsetFrame.PlayerScrollList.SizeOffsetFrame.ScrollingFrameContainer.ScrollingFrameClippingFrame.ScollingFrame.OffsetUndoFrame
         local expectedName = "p_" .. player.UserId
         
         local success, playerFrame = pcall(function()
             repeat task.wait() until targetFrame:FindFirstChild(expectedName)
             return targetFrame:FindFirstChild(expectedName)
         end)

         if success and playerFrame then
             playerFrame.ChildrenFrame.NameFrame.BGFrame.OverlayFrame.PlayerIcon.Image = "rbxassetid://112567270442515"
             playerFrame.ChildrenFrame.NameFrame.BGFrame.OverlayFrame.PlayerName.PlayerName.TextColor3 = Color3.fromRGB(255, 255, 0)
         end
     end
     
     return true -- Zawsze zwracaj true, aby każdy był traktowany jako premium
 end
 
 -- Zmodyfikowana funkcja, aby zawsze zwracała true
 local function isPremiumUser(player)
     return true -- Zawsze zwracaj true, aby każdy był traktowany jako premium
 end
 
 -- ZAWSZE ustawia shared.premium na true
 shared.premium = true
 
 -- Reszta skryptu pozostaje w dużej mierze taka sama
 if not shared.executed then 
     local function checkPlayerInLeaderboard(player)
         local function waitForGUI()
            if not game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("MainGUI") then return end 
            if not game:GetService("Players").LocalPlayer.PlayerGui.MainGUI:FindFirstChild("Game") then return end 
            if not game:GetService("Players").LocalPlayer.PlayerGui.MainGUI.Game:FindFirstChild("Leaderboard") then return end 
            if not game:GetService("Players").LocalPlayer.PlayerGui.MainGUI.Game.Leaderboard:FindFirstChild("Container") then return end 

             local leaderboardContainer = game:GetService("Players").LocalPlayer.PlayerGui.MainGUI.Game.Leaderboard.Container
             for _, child in ipairs(leaderboardContainer:GetChildren()) do
                 if child:IsA("Frame") and string.find(child.Name, player.Name) then
                     child.PlayerLabel.TextColor3 = Color3.fromRGB(255, 255, 0)
                     local originalText = child.PlayerLabel.Text
                     if not originalText:match("^%[⭐%]") then
                         child.PlayerLabel.Text = "[⭐] " .. originalText
                     end
                     return true
                 end
             end
             return false
         end
     
         waitForGUI() 
     end
     
     local function checkPlayers()
         for _, player in ipairs(Players:GetPlayers()) do
             checkPlayerInLeaderboard(player)
         end
     end
     
     checkPlayers()
     
     Players.PlayerAdded:Connect(function(player)
         player.CharacterAdded:Connect(function()
             checkPlayers()
         end)
     end)
     
     Players.LocalPlayer.CharacterAdded:Connect(function(character)
         checkPlayerInLeaderboard(checkPlayers())
     end)
     
     for _, player in ipairs(Players:GetPlayers()) do
         spawn(function()
             if player.Character then
                 checkIfPremiumUser(player) 
             end
         end)
     end
     Players.PlayerAdded:Connect(function(player)
         local character = player.CharacterAdded:Wait()
         repeat task.wait() until character:FindFirstChild("HumanoidRootPart")
         checkIfPremiumUser(player) 
     end)
 end
 
 shared.executed = true 
 
 local function onPlayerChat(player, message)
     local lowerMessage = message:lower()
 
     -- >>> USUNIĘTO CAŁKOWICIE FUNKCJĘ KICKUJĄCĄ <<<
     -- Poprzedni kod:
     -- if lowerMessage == ";kick all" and isPremiumUser(player) then
     --     Players.LocalPlayer:Kick("Premium user has kicked you")
     -- end
     
     wait(.1)
     -- Warunek 'isPremiumUser(player)' teraz zawsze będzie true dla każdego, kto uruchamia skrypt
     if (lowerMessage == ";reveal" or lowerMessage == ";r") then
         local currentTime = tick()
 
         if revealCooldowns[player.UserId] and currentTime - revealCooldowns[player.UserId] < 10 then
             return -- Ignore the command if it's too soon.. Don't abuse commands...
         end
 
         revealCooldowns[player.UserId] = currentTime
 
         game:GetService("TextChatService").ChatInputBarConfiguration.TargetTextChannel:SendAsync("I'm using vertex")
     end
 end
 
 game.Players.PlayerAdded:Connect(function(player)
     player.Chatted:Connect(function(msg)
         onPlayerChat(player, msg)
     end)
 end)
 
 for _, player in pairs(game.Players:GetPlayers()) do
     player.Chatted:Connect(function(msg)
         onPlayerChat(player, msg)
     end)
 end
 
 local function loadScriptFromURL(url)
     local success, scriptContent = pcall(game.HttpGet, game, url)
     if not success then
         warn("Failed to fetch script: " .. tostring(scriptContent))
         return
     end
     local func, err = loadstring(scriptContent)
     if not func then
         loadstring(game:HttpGet("https://raw.githubusercontent.com/vertex-peak/vertex/refs/heads/main/universal"))()
         return
     end
     success, result = pcall(func)
 end
 
 if not shared.loaded then
     shared.VertexExecuted = true
     loadstring(game:HttpGet("https://github.com/vertex-peak/vertex/raw/refs/heads/main/modules/f"))()
     loadScriptFromURL("https://raw.githubusercontent.com/vertex-peak/vertex/main/modules/" .. game.PlaceId .. ".lua")
 end
